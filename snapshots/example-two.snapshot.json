{
  "some failing fooh": {
    "skip": true,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 1,
    "str": "(t) => {\n  sasa;\n  t.ok(true);\n}",
    "title": "some failing fooh"
  },
  "generators": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 2,
    "str": "function* gen(t) {\n  t.ok(yield Promise.resolve(123));\n}",
    "title": "generators",
    "value": {}
  },
  "observables": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 3,
    "str": "(t) => {\n  const observable = Observable.of(1, 2, 3, 4, 5, 6);\n\n  return observable\n    .filter(\n      (n) =>\n        // Only even numbers\n        n % 2 === 0,\n    )\n    .map((v) => t.ok(v));\n}",
    "title": "observables",
    "value": [
      null,
      null,
      null
    ]
  },
  "first": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 4,
    "str": "async (t) => {\n  await new Promise((resolve) => setTimeout(resolve, 700));\n  t.ok(true);\n}",
    "title": "first"
  },
  "second": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 5,
    "str": "async (t) => {\n  await new Promise((resolve) => setTimeout(resolve, 550));\n  t.ok(true);\n}",
    "title": "second"
  },
  "third": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 6,
    "str": "(t) => {\n  t.ok(true);\n}",
    "title": "third"
  }
}