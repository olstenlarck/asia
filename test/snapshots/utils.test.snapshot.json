{
  "getRelativePath returns a string without throwing": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 1,
    "str": "(t) => {\n  t.strictEqual(typeof getRelativePath(__filename), 'string');\n}",
    "title": "getRelativePath returns a string without throwing"
  },
  "getCodeInfo returns not ok when cant find filename in stack": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 2,
    "str": "(t) => {\n  const { ok } = getCodeInfo({ err: { stack: '' }, filename: 'fake-bar.js' });\n\n  t.strictEqual(ok, false);\n}",
    "title": "getCodeInfo returns not ok when cant find filename in stack"
  },
  "getCodeInfo is ok": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 3,
    "str": "(t) => {\n  const err = new Error('woohoo fake');\n  const opts = { err, filename: __filename };\n  const { ok, sourceFrame, atLine } = getCodeInfo(opts);\n\n  t.strictEqual(ok, true);\n  t.strictEqual(typeof sourceFrame, 'string');\n  t.strictEqual(atLine.includes(__filename), true);\n}",
    "title": "getCodeInfo is ok"
  },
  "getParsedArgv returns correct when have env.ASIA_ARGV passed": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 4,
    "str": "(t) => {\n  const oldArgv = { qux: 123, bar: 'zazz' };\n  const ASIA_ARGV = JSON.stringify(oldArgv);\n  const parsedArgv = getParsedArgv({ env: { ASIA_ARGV } });\n\n  t.deepEqual(parsedArgv, oldArgv);\n}",
    "title": "getParsedArgv returns correct when have env.ASIA_ARGV passed"
  },
  "getParsedArgv gets correct when no env given": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 5,
    "str": "(t) => {\n  const argv = getParsedArgv({ argv: ['fake', 'fake', '--foobar=hohoho'] });\n\n  t.strictEqual(typeof argv, 'object');\n  t.strictEqual(argv.foobar, 'hohoho');\n}",
    "title": "getParsedArgv gets correct when no env given"
  },
  "getReporter returns default \"mini\" reporter when no argv": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 6,
    "str": "(t) => {\n  const reporter = createReporter();\n\n  t.strictEqual(typeof getReporter(), 'function');\n  t.strictEqual(typeof reporter, 'object');\n  t.strictEqual(typeof reporter.on, 'function');\n  t.strictEqual(typeof reporter.emit, 'function');\n  t.strictEqual(reporter.name, 'mini');\n}",
    "title": "getReporter returns default \"mini\" reporter when no argv"
  },
  "getReporter returns reporter when --reporter is passed": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 7,
    "str": "(t) => {\n  // eslint-disable-next-line global-require\n  const codeframe = require('../src/reporters/codeframe');\n  const reporterFn = getReporter({ reporter: codeframe });\n\n  t.strictEqual(typeof reporterFn, 'function');\n\n  const reporter = createReporter({\n    parsedArgv: { reporter: './src/reporters/codeframe.js' },\n  });\n  t.strictEqual(reporter.name, 'codeframe');\n}",
    "title": "getReporter returns reporter when --reporter is passed"
  },
  "isInstalled should return true if `name` is installed": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 8,
    "str": "(t) => {\n  t.strictEqual(isInstalled('p-map'), true);\n}",
    "title": "isInstalled should return true if `name` is installed"
  },
  "getReporter should load builtin reporters only by name": {
    "skip": false,
    "todo": false,
    "run": false,
    "isPending": false,
    "isRejected": false,
    "isFulfilled": true,
    "id": 9,
    "str": "(t) => {\n  const reporterFn = getReporter({ reporter: 'codeframe' });\n  const emitter = reporterFn({});\n\n  t.strictEqual(reporterFn.name, 'codeframeReporter');\n  t.strictEqual(emitter.name, 'codeframe');\n}",
    "title": "getReporter should load builtin reporters only by name"
  }
}